Add Two Numbers Represented By Linked List


Given two numbers represented by two lists, write a function that returns the sum in the form of a linked list.

Example:

Input: 
List1: 5->6->3 // represents number 563 
List2: 8->4->2 // represents number 842 
Output: 
Resultant list: 1->4->0->5 // represents number 1405 
Explanation: 563 + 842 = 1405

Input: 
List1: 7->5->9->4->6 // represents number 75946
List2: 8->4 // represents number 84
Output: 
Resultant list: 7->6->0->3->0// represents number 76030
Explanation: 75946+84=76030



SOLUTION IN JAVA:


package singlyLinkedList;


public class AddTwoNumbers {
	private Node head1,head2;
	
	private class Node{
		int val;
		Node next;
		
		public Node(int val) {
			this.val=val;
		}
	}
	
  //Inserting Node
	public Node insert(Node head,int val) {
		Node node=new Node(val);
		if(head==null) {
			head=node;
			head.next=null;
		}
		Node temp=head;
		while(temp.next!=null) {
			temp=temp.next;
		}
		temp.next=node;
		node.next=null;
		
		return head;
	}
	
  //Insert Nodes in List1
	public void insertList1(int val) {
		head1=insert(head1,val);
	}
	
  //Insert Nodes in List2
	public void insertList2(int val) {
		head2=insert(head2,val);
	}
	

	// Reverse each Nodes in the List
	public Node reverse(Node head) {
		Node curr=head;
		Node prev=null;
		Node next=null;
		while(curr!=null) {
			next=curr.next;
			curr.next=prev;
			prev=curr;
			curr=next;
		}
		
		return prev;
	}
	
  
  	public void print(Node head) {
		Node node=head;
		if(node==null) {
			System.out.println("null");
			return;
		}
		while(node!=null) {
			System.out.print(node.val+"->");
			node=node.next;
		}
		System.out.println("end");
	}
  
  //Print Nodes in List1
	public void printNode1() {
		print(head1);
	}
  //Print Nodes in List2
	public void printNode2() {
		print(head2);
	}
	
	
	
	public void addTwoNumbers() {
		
		head1=reverse(head1);
		head2=reverse(head2);
		Node node=new Node(0);
		Node dummy=node;
		int carry=0;
		while(head1!=null || head2!=null || carry>0) {
			if(head1!=null) {
				carry+=head1.val;
				head1=head1.next;
			}
			if(head2!=null) {
				carry+=head2.val;
				head2=head2.next;
			}
			node.next=new Node(carry%10);
			carry=carry/10;
			node=node.next;
			
		}
		dummy=dummy.next;
		dummy=reverse(dummy);
		print(dummy);
	}
	
}


public class Main {
	public static void main(String[] args) {

		AddTwoNumbers list1=new AddTwoNumbers();
    //List1
		list1.insertList1(7);
		list1.insertList1(5);
		list1.insertList1(9);
		list1.insertList1(4);
		list1.insertList1(6);
		//List2
		list1.insertList2(8);
		list1.insertList2(4);
    
		list1.addTwoNumbers();
		
	}
}
