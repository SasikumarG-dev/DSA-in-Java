Auxiliary Given a singly linked list, find the middle of the linked list. 
For example, if the given linked list is 1->2->3->4->5 then the output should be 3. 

If there are even nodes, then there would be two middle nodes, we need to print the second middle element. 
For example, if the given linked list is 1->2->3->4->5->6 then the output should be 4. 


SOLUTION IN JAVA:

package singlyLinkedList;

public class MiddleNode {

	Node head;
	class Node{
		int val;
		Node next;
		
		public Node(int val) {
			this.val=val;
		}
		
		public Node(int val,Node next) {
			this.val=val;
			this.next=next;
		}
	}
	public Node insert(int val) {
		Node node=new Node(val);
		if(head==null) {
			head=node;
			head.next=null;
		}
		Node temp=head;
		while(temp.next!=null) {
			temp=temp.next;
		}
		temp.next=node;
		node.next=null;
		
		return head;
		
	}
	
	
	public int findMiddle() {
		Node slow=head;
		Node fast=head;
		
		while(fast!=null && fast.next!=null) {
			slow=slow.next;
			fast=fast.next.next;
			
		}
		return slow.val;
	}
	

}

	public static void main(String[] args) {
		
		MiddleNode list=new MiddleNode();
		list.insert(0);
		list.insert(1);
		list.insert(2);
		list.insert(3);
		list.insert(4);
		
		System.out.println(list.findMiddle());
		
	}

}


OUTPUT: 2
